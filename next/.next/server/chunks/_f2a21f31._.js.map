{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hu/Downloads/Compressed/luuppi-next-main4%20-%20Kopya/luuppi-next-main/next/src/libs/utils/logger.ts"],"sourcesContent":["import 'server-only';\n\n/* eslint-disable no-console */\nconst LOGS_ENABLED = process.env.LOGS_ENABLED ?? true;\n\nconst getFormattedDate = () => {\n  const date = new Date();\n  return `${\n    date.getMonth() + 1\n  }/${date.getDate()}/${date.getFullYear()}, ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n};\n\nconst formatMessage = (message: any[]) =>\n  message\n    .map((m) => {\n      if (m instanceof Error) {\n        return m.stack;\n      }\n      if (typeof m === 'object') {\n        return JSON.stringify(m, null, 2);\n      }\n      return m;\n    })\n    .join(', ');\n\nconst colors = {\n  green: '\\x1b[32m',\n  red: '\\x1b[31m',\n  yellow: '\\x1b[33m',\n  reset: '\\x1b[0m',\n  bold: '\\x1b[1m',\n};\n\nconst getPath = () => {\n  const path = __filename;\n  const pathSplit = path.split('/');\n  return pathSplit.slice(-2).join('/').replace('.js', '.ts');\n};\n\n/**\n * Logger utility to log messages to the console.\n */\nexport const logger = {\n  info: (...message: any[]) => {\n    if (!LOGS_ENABLED) return;\n    console.log(\n      ` ${colors.bold}${colors.green}✓${colors.reset} ${getFormattedDate()} ${\n        colors.green\n      }INFO ${colors.yellow}[${getPath()}]${colors.green} ${formatMessage(message)}`,\n    );\n  },\n  error: (...message: any[]) => {\n    if (!LOGS_ENABLED) return;\n    console.log(\n      ` ${colors.bold}${colors.red}✖${colors.reset} ${getFormattedDate()} ${\n        colors.red\n      }ERROR ${colors.yellow}[${getPath()}]${colors.red} ${formatMessage(message)}`,\n    );\n  },\n};\n"],"names":[],"mappings":";;;AAAA;;AAEA,6BAA6B,GAC7B,MAAM,eAAe,QAAQ,GAAG,CAAC,YAAY,IAAI;AAEjD,MAAM,mBAAmB;IACvB,MAAM,OAAO,IAAI;IACjB,OAAO,GACL,KAAK,QAAQ,KAAK,EACnB,CAAC,EAAE,KAAK,OAAO,GAAG,CAAC,EAAE,KAAK,WAAW,GAAG,EAAE,EAAE,KAAK,QAAQ,GAAG,CAAC,EAAE,KAAK,UAAU,GAAG,CAAC,EAAE,KAAK,UAAU,IAAI;AAC1G;AAEA,MAAM,gBAAgB,CAAC,UACrB,QACG,GAAG,CAAC,CAAC;QACJ,IAAI,aAAa,OAAO;YACtB,OAAO,EAAE,KAAK;QAChB;QACA,IAAI,OAAO,MAAM,UAAU;YACzB,OAAO,KAAK,SAAS,CAAC,GAAG,MAAM;QACjC;QACA,OAAO;IACT,GACC,IAAI,CAAC;AAEV,MAAM,SAAS;IACb,OAAO;IACP,KAAK;IACL,QAAQ;IACR,OAAO;IACP,MAAM;AACR;AAEA,MAAM,UAAU;IACd,MAAM,OAAO;IACb,MAAM,YAAY,KAAK,KAAK,CAAC;IAC7B,OAAO,UAAU,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,OAAO,CAAC,OAAO;AACtD;AAKO,MAAM,SAAS;IACpB,MAAM,CAAC,GAAG;QACR,IAAI,CAAC,cAAc;QACnB,QAAQ,GAAG,CACT,CAAC,CAAC,EAAE,OAAO,IAAI,GAAG,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,mBAAmB,CAAC,EACpE,OAAO,KAAK,CACb,KAAK,EAAE,OAAO,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,cAAc,UAAU;IAElF;IACA,OAAO,CAAC,GAAG;QACT,IAAI,CAAC,cAAc;QACnB,QAAQ,GAAG,CACT,CAAC,CAAC,EAAE,OAAO,IAAI,GAAG,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,mBAAmB,CAAC,EAClE,OAAO,GAAG,CACX,MAAM,EAAE,OAAO,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,EAAE,cAAc,UAAU;IAEjF;AACF","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/hu/Downloads/Compressed/luuppi-next-main4%20-%20Kopya/luuppi-next-main/next/src/instrumentation.ts"],"sourcesContent":["import { logger } from './libs/utils/logger';\n\nexport function register() {\n  if (process.env.NEXT_RUNTIME === 'node') {\n    logger.info('Validating environment variables');\n\n    const envValidation = {\n      // Must be a valid URL\n      NEXT_PUBLIC_STRAPI_BASE_URL: {\n        regex: /^(http|https):\\/\\/[^ \"]+$/,\n        message: 'NEXT_PUBLIC_STRAPI_BASE_URL must be a valid URL',\n      },\n      NEXT_PUBLIC_BASE_URL: {\n        regex: /^(http|https):\\/\\/[^ \"]+$/,\n        message: 'NEXT_PUBLIC_BASE_URL must be a valid URL',\n      },\n      TOKEN_VERSION: {\n        regex: /^[0-9]+$/,\n        message: 'TOKEN_VERSION must be a number',\n      },\n      NEXT_PUBLIC_NO_ROLE_ID: {\n        // Only lowercase chars (with äö), numbers and - allowed\n        regex: /^[a-z0-9äö-]+$/,\n        message:\n          'NEXT_PUBLIC_NO_ROLE_ID must be lowercase characters, numbers and -',\n      },\n      NEXT_PUBLIC_LUUPPI_MEMBER_ID: {\n        // Only lowercase chars (with äö), numbers and - allowed\n        regex: /^[a-z0-9äö-]+$/,\n        message:\n          'NEXT_PUBLIC_LUUPPI_MEMBER_ID must be lowercase characters, numbers and -',\n      },\n      NEXT_PUBLIC_LUUPPI_HATO_ID: {\n        // Only lowercase chars (with äö), numbers and - allowed\n        regex: /^[a-z0-9äö-]+$/,\n        message:\n          'NEXT_PUBLIC_LUUPPI_HATO_ID must be lowercase characters, numbers and -',\n      },\n      AZURE_TENANT_NAME: {\n        // Only alphanumeric characters and -\n        regex: /^[a-zA-Z0-9]+$/,\n        message: 'AZURE_TENANT_NAME must be alphanumeric characters',\n      },\n      AZURE_TENANT_ID: {\n        // Must be a valid UUID\n        regex: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/,\n        message: 'AZURE_TENANT_ID must be a valid UUID',\n      },\n      AZURE_COMMUNICATION_SERVICE_CONNECTION_STRING: {\n        regex: /^endpoint=https:\\/\\/[^ \"]+$/,\n        message:\n          'AZURE_COMMUNICATION_SERVICE_CONNECTION_STRING must start with endpoint=https://',\n      },\n      AZURE_COMMUNICATION_SERVICE_SENDER_EMAIL: {\n        // Must be a valid email\n        regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n        message:\n          'AZURE_COMMUNICATION_SERVICE_SENDER_EMAIL must be a valid email',\n      },\n      AZURE_P_CLIENT_ID: {\n        // Must be a valid UUID\n        regex: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/,\n        message: 'AZURE_P_CLIENT_ID must be a valid UUID',\n      },\n      AZURE_P_CLIENT_SECRET: {\n        // Must be a string\n        regex: /./,\n        message: 'AZURE_P_CLIENT_SECRET must be a string',\n      },\n      AZURE_S_CLIENT_ID: {\n        // Must be a valid UUID\n        regex: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/,\n        message: 'AZURE_S_CLIENT_ID must be a valid UUID',\n      },\n      AZURE_S_CLIENT_SECRET: {\n        // Must be a string\n        regex: /./,\n        message: 'AZURE_S_CLIENT_SECRET must be a string',\n      },\n      JWT_SECRET: {\n        // Must be a string\n        regex: /./,\n        message: 'JWT_SECRET must be a string',\n      },\n      AUTH_SECRET: {\n        // Must be a string\n        regex: /./,\n        message: 'AUTH_SECRET must be a string',\n      },\n      REVALIDATE_AUTH_SECRET: {\n        // Must be a string\n        regex: /./,\n        message: 'REVALIDATE_AUTH_SECRET must be a string',\n      },\n      SLACK_WEBHOOK_URL: {\n        // Starts with https://hooks.slack.com/services/\n        regex: /^https:\\/\\/hooks.slack.com\\/services\\//,\n        message: 'SLACK_WEBHOOK_URL must be a valid URL',\n      },\n      REDIS_PORT: {\n        // Must be a number\n        regex: /^[0-9]+$/,\n        message: 'REDIS_PORT must be a number',\n      },\n      TURNSTILE_SECRET: {\n        // Must be a string\n        regex: /./,\n        message: 'TURNSTILE_SECRET must be a string',\n      },\n      NEXT_PUBLIC_TURNSTILE_SITE_KEY: {\n        // Must be a string\n        regex: /./,\n        message: 'NEXT_PUBLIC_TURNSTILE_SITE_KEY must be a string',\n      },\n      DATABASE_URL: {\n        // Must be a valid URL\n        regex: /^postgres:\\/\\/[^ \"]+$/,\n        message: 'DATABASE_URL must be a valid URL',\n      },\n      DATABASE_USERNAME: {\n        // Must be a string\n        regex: /./,\n        message: 'DATABASE_USERNAME must be a string',\n      },\n      DATABASE_PASSWORD: {\n        // Must be a string\n        regex: /./,\n        message: 'DATABASE_PASSWORD must be a string',\n      },\n      DATABASE_NAME: {\n        // Must be a string\n        regex: /./,\n        message: 'DATABASE_NAME must be a string',\n      },\n      VISMAPAY_API_KEY: {\n        // Must be a string\n        regex: /./,\n        message: 'VISMAPAY_API must be a string',\n      },\n      VISMAPAY_PRIVATE_KEY: {\n        // Must be a string\n        regex: /./,\n        message: 'VISMAPAY_PRIVATE_KEY must be a string',\n      },\n      STRAPI_API_KEY: {\n        // Must be a string\n        regex: /./,\n        message: 'STRAPI_API must be a string',\n      },\n    };\n\n    for (const [key, value] of Object.entries(envValidation)) {\n      if (!process.env[key]) {\n        logger.error(`Environment variable ${key} is missing`);\n        throw new Error(`Environment variable ${key} is missing`);\n      }\n\n      if (!value.regex.test(process.env[key]!)) {\n        logger.error(value.message);\n        throw new Error(value.message);\n      }\n    }\n\n    logger.info('Environment variables are valid');\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS;IACd,uCAAyC;;IAiKzC;AACF","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}